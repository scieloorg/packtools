from packtools.sps.models.article_toc_sections import ArticleTocSections
from packtools.sps.models.article_titles import ArticleTitles


def _get_article_sections(sections):
    """
    Groups article sections by language.

    This function iterates over a collection of article sections, grouping them based on the language specified in each
    section. For each language, a dictionary is created containing a list of sections, a standard title for validating
    the article section title, and a specific xpath.

    Args:
    sections (object): An object containing multiple sections of an article, where each section has a 'lang' attribute
    indicating the language and a 'text' attribute containing the content of the section.

    Returns:
    dict: A dictionary where each key is a language code and the value is another dictionary.
    This dictionary contains a list of sections ('sections') for that language, a standard title ('title'),
    and an xpath ('xpath'). Example:
    {
        'en': {
            'sections': ['English section 1 text', 'English section 2 text'],
            'title': 'Article section title validation',
            'xpath': ".//article-meta//subj-group[@subj-group-type='heading']/subject"
        },
        'fr': {
            'sections': ['French section 1 text', 'French section 2 text'],
            'title': 'Article section title validation',
            'xpath': ".//article-meta//subj-group[@subj-group-type='heading']/subject"
        }
    }


    Description automatically generated by ChatGPT.
    """
    resp = {}
    for section in sections.article_section:
        lang = section.get('lang')
        if lang not in resp:
            resp[lang] = {}
            resp[lang]['sections'] = []
            resp[lang]['title'] = 'Article section title validation'
            resp[lang]['xpath'] = ".//article-meta//subj-group[@subj-group-type='heading']/subject"
        resp[lang]['sections'].append(section.get('text'))
    return resp


def _get_sub_article_sections(sections):
    """
    Groups article sections by language.

    This function iterates over a collection of sub-article sections, grouping them based on the language specified in each
    section. For each language, a dictionary is created containing a list of sections, a standard title for validating
    the article section title, and a specific xpath.

    Args:
    sections (object): An object containing multiple sections of an article, where each section has a 'lang' attribute
    indicating the language and a 'text' attribute containing the content of the section.

    Returns:
    dict: A dictionary where each key is a language code and the value is another dictionary.
    This dictionary contains a list of sections ('sections') for that language, a standard title ('title'),
    and an xpath ('xpath'). Example:
    {
        'en': {
            'sections': ['English section 1 text', 'English section 2 text'],
            'title': 'Sub-article section title validation',
            'xpath': ".//sub-article[@article-type='translation']//front-stub//subj-group[@subj-group-type='heading']/subject"
        },
        'es': {
            'sections': ['Spanish section 1 text', 'Spanish section 2 text'],
            'title': 'Sub-article section title validation',
            'xpath': ".//sub-article[@article-type='translation']//front-stub//subj-group[@subj-group-type='heading']/subject"
        }
    }


    Description automatically generated by ChatGPT.
    """
    resp = {}
    for section in sections.sub_article_section:
        lang = section.get('lang')
        if lang not in resp:
            resp[lang] = {}
            resp[lang]['sections'] = []
            resp[lang]['title'] = 'Sub-article section title validation'
            resp[lang]['xpath'] = ".//sub-article[@article-type='translation']//front-stub//subj-group[@subj-group-type='heading']/subject"
        resp[lang]['sections'].append(section.get('text'))
    return resp


def _get_sections(sections):
    """
    Aggregates main article sections and sub-article sections into a single dictionary.

    This function first calls `_get_article_sections` to retrieve the main article sections and then `
    _get_sub_article_sections` to get the sub-article sections. Both sets of sections are aggregated into a single
    dictionary, with the sub-article sections being merged into the main article sections.

    Args:
    sections (object): An object containing sections of an article. This object is expected to have a structure that is
    compatible with the `_get_article_sections` and `_get_sub_article_sections` functions.

    Returns:
    dict: A dictionary containing both main article sections and sub-article sections. If a section appears in both
    main and sub-article sections, the version from the sub-article sections will be used. Example:
    {
        'en': {
            'sections': ['Sub English section 1'],  # Overwrites the main article sections
            'title': 'Sub-article section title validation',
            'xpath': ".//sub-article[@article-type='translation']//front-stub//subj-group[@subj-group-type='heading']/subject"
        },
        'fr': {
            'sections': ['Main French section 1'],
            'title': 'Main Article section title validation',
            'xpath': ".//article-meta//subj-group[@subj-group-type='heading']/subject"
        },
        'es': {
            'sections': ['Sub Spanish section 1'],
            'title': 'Sub-article section title validation',
            'xpath': ".//sub-article[@article-type='translation']//front-stub//subj-group[@subj-group-type='heading']/subject"
        }
    }


    Description automatically generated by ChatGPT.
    """
    article = _get_article_sections(sections)
    sub_article = _get_sub_article_sections(sections)
    article.update(sub_article)
    return article


class ArticleTocSectionsValidation:
    def __init__(self, xmltree):
        self.xmltree = xmltree
        self.article_toc_sections = ArticleTocSections(xmltree)
        self.article_titles = ArticleTitles(xmltree)

    def validate_article_toc_sections(self, expected_toc_sections):
        resp = []
        for lang, text in self.article_toc_sections.all_section_dict.items():
            if text == self.article_toc_sections.article_section_dict.get(lang):
                obj = 'article section title'
            else:
                obj = 'sub-article section title'
            if text in (expected_toc_sections.get(lang) or []):
                message = "OK, section titles match the document"
                result = True
            else:
                message = "ERROR, section titles no match the document"
                result = False
            resp.append(
                dict(
                    object=obj,
                    expected_value=expected_toc_sections.get(lang),
                    obtained_value=text,
                    result=result,
                    message=message
                )
            )
        return resp

    def validade_article_title_is_different_from_section_titles(self):
        section_titles = self.article_toc_sections.article_section_dict
        section_titles.update(self.article_toc_sections.sub_article_section_dict)
        article_title = self.article_titles.article_title_dict
        resp = []
        message = "OK, all section titles are different from the title of the article"
        result = True
        for lang, text in section_titles.items():
            if text == article_title.get(lang):
                message = 'ERROR: Article title ("{}") must not be the same as the section title ("{}")'.format(article_title.get(lang), text)
                result = False

        resp.append(
            dict(
                object='section title',
                article_title=article_title,
                section_title=section_titles,
                result=result,
                message=message
            )
        )
        return resp

    
    def validate(self, data):
        """
        Função que executa as validações da classe ArticleTocSectionsValidation.

        Returns:
            dict: Um dicionário contendo os resultados das validações realizadas.
        
        """
        toc_sections_results = {
            'article_toc_sections_validation': 
                self.validate_article_toc_sections(data['expected_toc_sections'])
            }
        title_results = {
            'article_title_validation': self.validade_article_title_is_different_from_section_titles()
            }
        
        toc_sections_results.update(title_results)
        return toc_sections_results